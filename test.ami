.static_data 0
# CLASS: In
# METHOD: scan_int 1
M_scan_int_1:
# METHOD: scan_float 2
M_scan_float_2:
# CLASS: Out
# METHOD: print 3
M_print_3:
# METHOD: print 4
M_print_4:
# METHOD: print 5
M_print_5:
# METHOD: print 6
M_print_6:
# CLASS: Test
# CONSTRUCTOR: Test 1
C_1:
# METHOD: foo 7
M_foo_7:
while_start_0:
	bz a2, while_end_0
	# Store return value in a1 to a0
	move a0, a1
	ret

	jmp while_start_0
while_end_0:
	# Load int 5 into register t0
	move_immed_i t0, 5
	# Store return value in t0 to a0
	move a0, t0
	ret

# METHOD: main 8
M_main_8:
	# Creating new Test object
	move_immed_i t4, 0 # Base addr of obj in t4
	move_immed_i t5, 0 # Num of cells/heap offset in t5
	halloc t4 t5 # Allocate 0 cells for object
	save t4
	save a0
	move a0, t4 # a0 for constructor always has baseAddr of newObj in heap
	call C_1
	restore t4
	restore a0
	# Store the rhs value in t4 into lhs t3
	move t3, t4
	isub t6, t2, t1
	bnz t6, binary_expr_false_0
	move_immed_i t6, 1
	j binary_expr_end_0
binary_expr_false_0:
	move_immed_i t6, 0
binary_expr_end_0:
	bz t6, if_stmt_else_0
	save a0
	save t0
	save t1
	save t2
	save t3
# Load the stuff from heap for var field access
move t7, 0
	move a0, t7
	move a1, t0
	# Load boolean true into register t8
	move_immed_i t8, 1
	move a2, t8
	call M_foo_7
	move t9, a0
	restore t3
	restore t2
	restore t1
	restore t0
	restore a0
	jmp if_stmt_end_0
if_stmt_else_0:
if_stmt_end_0:
	# Load int 5 into register t12
	move_immed_i t12, 5
	iadd t11, t12, t1
	# Load int 5 into register t13
	move_immed_i t13, 5
	isub t10, t11, t13
	# Store the rhs value in t10 into lhs t0
	move t0, t10
